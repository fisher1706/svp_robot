include:
  - project: 'takamol/qiwa/infrastructure/ci-cd'
    file: '/common-jobs/.package-docker-image.yml'
  - project: 'takamol/qiwa/infrastructure/ci-cd'
    file: '/common-jobs/.sonarqube-check.yml'
  - project: 'takamol/qiwa/infrastructure/ci-cd'
    file: '/common-jobs/.allure-report.yml'

variables:
  IMAGE: jed.ocir.io/axyoc73bayij/takamol/qa/svp_robot:master-latest
  WORKING_DIRECTORY: /builds/takamol/qa/svp_robot/
  POETRY_ENV: /app
  ROBOT_RESULTS_REPORTS: ./Results/Reports/
  ROBOT_REPORT: ./Results/Reports/report.html
  OUTPUT_REPORT: ./Results/Reports/output.xml
  ALLURE_RESULTS_DIRECTORY: ./Results/Reports/allure-results
  BROWSER: ./Results/Reports/browser/
  ROBOT_REPORT_LOG: ./Results/Reports/log.html

stages:
  - build
  - code_quality
  - run_tests
  - send-test-reports
  - send-slack-reports

.package:
  image: $OCI_REGISTRY/gitops/infra/ci-cd:package-latest
  services:
    - name: docker:dind
  script:
#    - echo $OCI_REGISTRY_PASSWORD | docker login $OCI_REGISTRY_REGION -u $OCI_REGISTRY_USERNAME --password-stdin
    - docker pull $OCI_ENV_LATEST || true
    #remove --build-arg when pip registry will be ready
    - docker build --cache-from $OCI_ENV_LATEST --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg CI_SERVER_HOST=${CI_SERVER_HOST} -t $OCI_ENV_LATEST -t $OCI_VERSION_TAGGED .
    - docker push $OCI_ENV_LATEST
    - docker push $OCI_VERSION_TAGGED
    - echo "Image name $OCI_VERSION_TAGGED"

build:
  stage: build
  extends: .package
  tags:
    - oci-dind
  variables:
    ENV: master
  only:
    refs:
      - master
      - merge_request
    changes:
      - Dockerfile
      - pyproject.toml

robocop:
  image: $IMAGE
  stage: code_quality
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . $(find $POETRY_ENV -name activate)
    - poetry run robocop
  only:
      - merge_requests

pylint:
  image: $IMAGE
  stage: code_quality
  tags:
    - oci-shared
  allow_failure: true
  before_script:
    - cd $WORKING_DIRECTORY
    - . $(find $POETRY_ENV -name activate)
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
  script:
    - poetry run pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/svp-robot-*/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - poetry run pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/svp-robot-*/**") > codeclimate.json
    - poetry run pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/svp-robot-*/**") > public/lint/index.html
    - if [ $(cat public/badges/$CI_JOB_NAME.score) != 10.00 ]; then exit 1; fi
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always
  only:
      - merge_requests


ui_admin_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/admin/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

ui_legislator_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/legislator/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  dependencies:
    - ui_admin_tests
  needs:
    - ui_admin_tests

ui_test_center_owner_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/test_center_owner/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  dependencies:
    - ui_admin_tests
    - ui_legislator_tests
  needs:
    - ui_admin_tests
    - ui_legislator_tests

ui_individual_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/individual/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  dependencies:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests
  needs:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests

ui_super_admin_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/super_admin/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  dependencies:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests
    - ui_individual_tests
  needs:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests
    - ui_individual_tests

ui_spa_home_tests:
  image: $IMAGE
  allow_failure: true
  stage: run_tests
  tags:
    - oci-shared
  script:
    - cd $WORKING_DIRECTORY
    - . ~/.bashrc
    - . $(find $POETRY_ENV -name activate)
    - python -m robot.run -d $ROBOT_RESULTS_REPORTS --listener allure_robotframework:$ALLURE_RESULTS_DIRECTORY Tests/ui/spa_home/
  artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  dependencies:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests
    - ui_individual_tests
    - ui_super_admin_tests
  needs:
    - ui_admin_tests
    - ui_legislator_tests
    - ui_test_center_owner_tests
    - ui_individual_tests
    - ui_super_admin_tests

allure-ui-admin-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-admin
  tags:
    - oci-shared
  dependencies:
    - ui_admin_tests
  needs:
    - ui_admin_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

allure-ui-super-admin-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-super
  tags:
    - oci-shared
  dependencies:
    - ui_super_admin_tests
  needs:
    - ui_super_admin_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

allure-ui-legislator-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-legislator
  tags:
    - oci-shared
  dependencies:
    - ui_legislator_tests
  needs:
    - ui_legislator_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

allure-ui-test_center_owner-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-tc
  tags:
    - oci-shared
  dependencies:
    - ui_test_center_owner_tests
  needs:
    - ui_test_center_owner_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

allure-ui-individual-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-individual
  tags:
    - oci-shared
  dependencies:
    - ui_individual_tests
  needs:
    - ui_individual_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

allure-ui-spa-home-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-home
  tags:
    - oci-shared
  dependencies:
    - ui_spa_home_tests
  needs:
    - ui_spa_home_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never


slack-report-ui-admin-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_admin_tests
    needs:
      - ui_admin_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-admin
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

slack-report-ui-super-admin-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_super_admin_tests
    needs:
      - ui_super_admin_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-super
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

slack-report-ui-legislator-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_legislator_tests
    needs:
      - ui_legislator_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-legislator
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

slack-report-ui-test_center_owner-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_test_center_owner_tests
    needs:
      - ui_test_center_owner_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-tc
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

slack-report-ui-individual-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_individual_tests
    needs:
      - ui_individual_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-individual
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

slack-report-ui-spa-home-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - ui_spa_home_tests
    needs:
      - ui_spa_home_tests
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-home
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never

db-connections:
    image: postgres:13
    allow_failure: true
    stage: run_tests
    tags:
      - oci-stage-psql
    variables:
      POSTGRES_HOST: 192.168.20.86
      POSTGRES_PORT: 5432
      POSTGRES_USER: qa_gitlab_reader
      POSTGRES_PASS: QA01@git-ru534
      POSTGRES_DB:  stage_svp_international_api
    script:
      - PGPASSWORD=$POSTGRES_PASS psql -h $POSTGRES_HOST -p  $POSTGRES_PORT -U qa_gitlab_reader -d   $POSTGRES_DB -c "UPDATE users
        SET full_name = 'Mohamed' WHERE users.id = 723;"
    artifacts:
    paths:
      - $ALLURE_RESULTS_DIRECTORY
      - $ROBOT_REPORT
      - $OUTPUT_REPORT
      - $ROBOT_REPORT_LOG
      - $BROWSER
    when: always

allure-db-connection-results:
  extends: .generate_allure_report
  stage: send-test-reports
  variables:
    ALLURE_URL: https://allure-api.takamol.support
    ALLURE_PROJECT_ID: svp-ui-daily-home
  tags:
    - oci-shared
  dependencies:
    - db-connections
  needs:
    - db-connections
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never        

slack-report-db-connection-results:
    image: $IMAGE
    allow_failure: true
    stage: send-slack-reports
    tags:
      - oci-shared
    dependencies:
      - db-connections
    needs:
      - db-connections
    script:
      - python Resources/Setup/send_allure_report.py svp-ui-daily-home
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
        when: always
      - when: never
      
